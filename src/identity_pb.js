/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var github.com_gogo_protobuf_gogoproto_gogo_pb = require('../../../../../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.exportSymbol('proto.identitypb.Certificate', null, global);
goog.exportSymbol('proto.identitypb.Device', null, global);
goog.exportSymbol('proto.identitypb.Identity', null, global);
goog.exportSymbol('proto.identitypb.OwningIdentity', null, global);
goog.exportSymbol('proto.identitypb.SigningIdentity', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identitypb.Identity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identitypb.Identity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.identitypb.Identity.displayName = 'proto.identitypb.Identity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identitypb.Identity.prototype.toObject = function(opt_includeInstance) {
  return proto.identitypb.Identity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identitypb.Identity} msg The msg instance to transform.
 * @return {!Object}
 */
proto.identitypb.Identity.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    organization: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rootAuthority: (f = msg.getRootAuthority()) && proto.identitypb.Certificate.toObject(includeInstance, f),
    certificateAuthority: (f = msg.getCertificateAuthority()) && proto.identitypb.Certificate.toObject(includeInstance, f),
    devicesMap: (f = msg.getDevicesMap()) ? f.toObject(includeInstance, proto.identitypb.Device.toObject) : [],
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identitypb.Identity}
 */
proto.identitypb.Identity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identitypb.Identity;
  return proto.identitypb.Identity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identitypb.Identity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identitypb.Identity}
 */
proto.identitypb.Identity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 3:
      var value = new proto.identitypb.Certificate;
      reader.readMessage(value,proto.identitypb.Certificate.deserializeBinaryFromReader);
      msg.setRootAuthority(value);
      break;
    case 4:
      var value = new proto.identitypb.Certificate;
      reader.readMessage(value,proto.identitypb.Certificate.deserializeBinaryFromReader);
      msg.setCertificateAuthority(value);
      break;
    case 5:
      var value = msg.getDevicesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.identitypb.Device.deserializeBinaryFromReader);
         });
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identitypb.Identity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identitypb.Identity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identitypb.Identity} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.identitypb.Identity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRootAuthority();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identitypb.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getCertificateAuthority();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.identitypb.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getDevicesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.identitypb.Device.serializeBinaryToWriter);
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.identitypb.Identity.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.identitypb.Identity.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string organization = 2;
 * @return {string}
 */
proto.identitypb.Identity.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.identitypb.Identity.prototype.setOrganization = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Certificate root_authority = 3;
 * @return {?proto.identitypb.Certificate}
 */
proto.identitypb.Identity.prototype.getRootAuthority = function() {
  return /** @type{?proto.identitypb.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.identitypb.Certificate, 3));
};


/** @param {?proto.identitypb.Certificate|undefined} value */
proto.identitypb.Identity.prototype.setRootAuthority = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.identitypb.Identity.prototype.clearRootAuthority = function() {
  this.setRootAuthority(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.identitypb.Identity.prototype.hasRootAuthority = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Certificate certificate_authority = 4;
 * @return {?proto.identitypb.Certificate}
 */
proto.identitypb.Identity.prototype.getCertificateAuthority = function() {
  return /** @type{?proto.identitypb.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.identitypb.Certificate, 4));
};


/** @param {?proto.identitypb.Certificate|undefined} value */
proto.identitypb.Identity.prototype.setCertificateAuthority = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.identitypb.Identity.prototype.clearCertificateAuthority = function() {
  this.setCertificateAuthority(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.identitypb.Identity.prototype.hasCertificateAuthority = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<string, Device> devices = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.identitypb.Device>}
 */
proto.identitypb.Identity.prototype.getDevicesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.identitypb.Device>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.identitypb.Device));
};


proto.identitypb.Identity.prototype.clearDevicesMap = function() {
  this.getDevicesMap().clear();
};


/**
 * optional google.protobuf.Timestamp created_at = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.identitypb.Identity.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.identitypb.Identity.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.identitypb.Identity.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.identitypb.Identity.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identitypb.SigningIdentity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identitypb.SigningIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.identitypb.SigningIdentity.displayName = 'proto.identitypb.SigningIdentity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identitypb.SigningIdentity.prototype.toObject = function(opt_includeInstance) {
  return proto.identitypb.SigningIdentity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identitypb.SigningIdentity} msg The msg instance to transform.
 * @return {!Object}
 */
proto.identitypb.SigningIdentity.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    organization: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rootAuthority: (f = msg.getRootAuthority()) && proto.identitypb.Certificate.toObject(includeInstance, f),
    certificateAuthority: (f = msg.getCertificateAuthority()) && proto.identitypb.Certificate.toObject(includeInstance, f),
    currentCertificate: (f = msg.getCurrentCertificate()) && proto.identitypb.Certificate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identitypb.SigningIdentity}
 */
proto.identitypb.SigningIdentity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identitypb.SigningIdentity;
  return proto.identitypb.SigningIdentity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identitypb.SigningIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identitypb.SigningIdentity}
 */
proto.identitypb.SigningIdentity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 3:
      var value = new proto.identitypb.Certificate;
      reader.readMessage(value,proto.identitypb.Certificate.deserializeBinaryFromReader);
      msg.setRootAuthority(value);
      break;
    case 4:
      var value = new proto.identitypb.Certificate;
      reader.readMessage(value,proto.identitypb.Certificate.deserializeBinaryFromReader);
      msg.setCertificateAuthority(value);
      break;
    case 5:
      var value = new proto.identitypb.Certificate;
      reader.readMessage(value,proto.identitypb.Certificate.deserializeBinaryFromReader);
      msg.setCurrentCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identitypb.SigningIdentity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identitypb.SigningIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identitypb.SigningIdentity} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.identitypb.SigningIdentity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRootAuthority();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identitypb.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getCertificateAuthority();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.identitypb.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getCurrentCertificate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.identitypb.Certificate.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.identitypb.SigningIdentity.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.identitypb.SigningIdentity.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string organization = 2;
 * @return {string}
 */
proto.identitypb.SigningIdentity.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.identitypb.SigningIdentity.prototype.setOrganization = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Certificate root_authority = 3;
 * @return {?proto.identitypb.Certificate}
 */
proto.identitypb.SigningIdentity.prototype.getRootAuthority = function() {
  return /** @type{?proto.identitypb.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.identitypb.Certificate, 3));
};


/** @param {?proto.identitypb.Certificate|undefined} value */
proto.identitypb.SigningIdentity.prototype.setRootAuthority = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.identitypb.SigningIdentity.prototype.clearRootAuthority = function() {
  this.setRootAuthority(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.identitypb.SigningIdentity.prototype.hasRootAuthority = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Certificate certificate_authority = 4;
 * @return {?proto.identitypb.Certificate}
 */
proto.identitypb.SigningIdentity.prototype.getCertificateAuthority = function() {
  return /** @type{?proto.identitypb.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.identitypb.Certificate, 4));
};


/** @param {?proto.identitypb.Certificate|undefined} value */
proto.identitypb.SigningIdentity.prototype.setCertificateAuthority = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.identitypb.SigningIdentity.prototype.clearCertificateAuthority = function() {
  this.setCertificateAuthority(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.identitypb.SigningIdentity.prototype.hasCertificateAuthority = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Certificate current_certificate = 5;
 * @return {?proto.identitypb.Certificate}
 */
proto.identitypb.SigningIdentity.prototype.getCurrentCertificate = function() {
  return /** @type{?proto.identitypb.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.identitypb.Certificate, 5));
};


/** @param {?proto.identitypb.Certificate|undefined} value */
proto.identitypb.SigningIdentity.prototype.setCurrentCertificate = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.identitypb.SigningIdentity.prototype.clearCurrentCertificate = function() {
  this.setCurrentCertificate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.identitypb.SigningIdentity.prototype.hasCurrentCertificate = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identitypb.OwningIdentity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identitypb.OwningIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.identitypb.OwningIdentity.displayName = 'proto.identitypb.OwningIdentity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identitypb.OwningIdentity.prototype.toObject = function(opt_includeInstance) {
  return proto.identitypb.OwningIdentity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identitypb.OwningIdentity} msg The msg instance to transform.
 * @return {!Object}
 */
proto.identitypb.OwningIdentity.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    organization: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rootAuthority: (f = msg.getRootAuthority()) && proto.identitypb.Certificate.toObject(includeInstance, f),
    certificateAuthority: (f = msg.getCertificateAuthority()) && proto.identitypb.Certificate.toObject(includeInstance, f),
    isRole: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identitypb.OwningIdentity}
 */
proto.identitypb.OwningIdentity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identitypb.OwningIdentity;
  return proto.identitypb.OwningIdentity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identitypb.OwningIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identitypb.OwningIdentity}
 */
proto.identitypb.OwningIdentity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 3:
      var value = new proto.identitypb.Certificate;
      reader.readMessage(value,proto.identitypb.Certificate.deserializeBinaryFromReader);
      msg.setRootAuthority(value);
      break;
    case 4:
      var value = new proto.identitypb.Certificate;
      reader.readMessage(value,proto.identitypb.Certificate.deserializeBinaryFromReader);
      msg.setCertificateAuthority(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identitypb.OwningIdentity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identitypb.OwningIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identitypb.OwningIdentity} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.identitypb.OwningIdentity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRootAuthority();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identitypb.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getCertificateAuthority();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.identitypb.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getIsRole();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.identitypb.OwningIdentity.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.identitypb.OwningIdentity.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string organization = 2;
 * @return {string}
 */
proto.identitypb.OwningIdentity.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.identitypb.OwningIdentity.prototype.setOrganization = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Certificate root_authority = 3;
 * @return {?proto.identitypb.Certificate}
 */
proto.identitypb.OwningIdentity.prototype.getRootAuthority = function() {
  return /** @type{?proto.identitypb.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.identitypb.Certificate, 3));
};


/** @param {?proto.identitypb.Certificate|undefined} value */
proto.identitypb.OwningIdentity.prototype.setRootAuthority = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.identitypb.OwningIdentity.prototype.clearRootAuthority = function() {
  this.setRootAuthority(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.identitypb.OwningIdentity.prototype.hasRootAuthority = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Certificate certificate_authority = 4;
 * @return {?proto.identitypb.Certificate}
 */
proto.identitypb.OwningIdentity.prototype.getCertificateAuthority = function() {
  return /** @type{?proto.identitypb.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.identitypb.Certificate, 4));
};


/** @param {?proto.identitypb.Certificate|undefined} value */
proto.identitypb.OwningIdentity.prototype.setCertificateAuthority = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.identitypb.OwningIdentity.prototype.clearCertificateAuthority = function() {
  this.setCertificateAuthority(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.identitypb.OwningIdentity.prototype.hasCertificateAuthority = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool is_role = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.identitypb.OwningIdentity.prototype.getIsRole = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.identitypb.OwningIdentity.prototype.setIsRole = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identitypb.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identitypb.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.identitypb.Device.displayName = 'proto.identitypb.Device';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identitypb.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.identitypb.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identitypb.Device} msg The msg instance to transform.
 * @return {!Object}
 */
proto.identitypb.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    certificate: (f = msg.getCertificate()) && proto.identitypb.Certificate.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    description: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identitypb.Device}
 */
proto.identitypb.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identitypb.Device;
  return proto.identitypb.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identitypb.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identitypb.Device}
 */
proto.identitypb.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = new proto.identitypb.Certificate;
      reader.readMessage(value,proto.identitypb.Certificate.deserializeBinaryFromReader);
      msg.setCertificate(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identitypb.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identitypb.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identitypb.Device} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.identitypb.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCertificate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identitypb.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.identitypb.Device.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.identitypb.Device.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string UUID = 2;
 * @return {string}
 */
proto.identitypb.Device.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.identitypb.Device.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Certificate certificate = 3;
 * @return {?proto.identitypb.Certificate}
 */
proto.identitypb.Device.prototype.getCertificate = function() {
  return /** @type{?proto.identitypb.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.identitypb.Certificate, 3));
};


/** @param {?proto.identitypb.Certificate|undefined} value */
proto.identitypb.Device.prototype.setCertificate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.identitypb.Device.prototype.clearCertificate = function() {
  this.setCertificate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.identitypb.Device.prototype.hasCertificate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.identitypb.Device.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.identitypb.Device.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.identitypb.Device.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.identitypb.Device.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.identitypb.Device.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.identitypb.Device.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identitypb.Certificate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identitypb.Certificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.identitypb.Certificate.displayName = 'proto.identitypb.Certificate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identitypb.Certificate.prototype.toObject = function(opt_includeInstance) {
  return proto.identitypb.Certificate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identitypb.Certificate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.identitypb.Certificate.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificate: msg.getCertificate_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identitypb.Certificate}
 */
proto.identitypb.Certificate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identitypb.Certificate;
  return proto.identitypb.Certificate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identitypb.Certificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identitypb.Certificate}
 */
proto.identitypb.Certificate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identitypb.Certificate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identitypb.Certificate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identitypb.Certificate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.identitypb.Certificate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes certificate = 1;
 * @return {!(string|Uint8Array)}
 */
proto.identitypb.Certificate.prototype.getCertificate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes certificate = 1;
 * This is a type-conversion wrapper around `getCertificate()`
 * @return {string}
 */
proto.identitypb.Certificate.prototype.getCertificate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCertificate()));
};


/**
 * optional bytes certificate = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCertificate()`
 * @return {!Uint8Array}
 */
proto.identitypb.Certificate.prototype.getCertificate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCertificate()));
};


/** @param {!(string|Uint8Array)} value */
proto.identitypb.Certificate.prototype.setCertificate = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.identitypb);
